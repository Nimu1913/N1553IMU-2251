version: '3.8'

services:
  # REDIS - For caching processed images
  redis:
    image: redis:7-alpine
    container_name: vehicle-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy lru
    restart: unless-stopped

  # RABBITMQ - For async job processing
  rabbitmq:
    image: rabbitmq:3-management
    container_name: vehicle-rabbitmq
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: unless-stopped

  # TRITON INFERENCE SERVER - For model serving
  triton:
    image: nvcr.io/nvidia/tritonserver:23.04-py3
    container_name: vehicle-triton
    ports:
      - "8001:8001"  # gRPC
      - "8002:8002"  # Metrics
    volumes:
      - ./triton/model_repository:/models
    command: tritonserver --model-repository=/models --model-control-mode=poll
    restart: unless-stopped

  # PROMETHEUS - For metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: vehicle-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    restart: unless-stopped

  # GRAFANA - For visualization
  grafana:
    image: grafana/grafana:latest
    container_name: vehicle-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - ./monitoring/grafana:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  redis_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: vehicle-ai-network
